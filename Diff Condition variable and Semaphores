A condition variable is generally used to avoid busy waiting (looping repeatedly while checking a condition) while waiting for a resource to become available. 
For instance, if you have a thread (or multiple threads) that can't continue onward until a queue is empty, 
the busy waiting approach would be to just doing something like:

//pseudocode
while(!queue.empty())
{
   sleep(1);
}

The problem with this is that you're wasting processor time by having this thread repeatedly check the condition. 
Why not instead have a synchronization variable that can be signaled to tell the thread that the resource is available?

//pseudocode
syncVar.lock.acquire();

while(!queue.empty())
{
   syncVar.wait();
}

//do stuff with queue

syncVar.lock.release();
Presumably, you'll have a thread somewhere else that is pulling things out of the queue. When the queue is empty, 
it can call syncVar.signal() to wake up a random thread that is sitting asleep on syncVar.wait() (or there's usually also a signalAll() or 
broadcast() method to wake up all the threads that are waiting).

==========================================
Semaphore can be used as lock mechanisum as well with value 0 and 1, Whicn is binray semaphores.
But condiation varible it's juts signalling mecganisum 

====================
>>> Why while loop is used in condiation varible instead of if condiation since anyway "if the condiation is flaese, condtion varible wait" ?

Just to elaborate on why there's this while loop instead of a simple if: something called spurios wakeup. 
Quoting this wikipedia article: "One of the reasons for this is a spurious wakeup; that is, 
a thread might be awoken from its waiting state even though no thread signaled the condition variable" 

It's also helpful for the case where a broadcast wakes up more threads than there are resources available 
(e.g. broadcast wakes up 3 threads, but there are only 2 items in the queue)

To clarify a bit, the reason that the condition may still be false to a thread that has just woken up (resulting in a spurious wakeup) 
is that there might have been a context switch before the thread got a chance to check the condition again, 
where some other scheduled thread made that condition false. 
This is one reason that I know for a spurious wakeup, don't know if there are more
===============================

Diff betwen Monitor and Semaphores:
We should even compare these two  beacuse Moniotor is like mutex for locking and Semaphores is for Sigannling.

A Monitor(Mutally exclusive lock for objects): is an object designed to be accessed from multiple threads. 
The member functions or methods of a monitor object will enforce mutual exclusion, so only one thread may be performing any action on the object at a given time. 
If one thread is currently executing a member function of the object then any other thread that tries to call a member function of that object will 
have to wait until the first has finished.

A Semaphore is a lower-level object. You might well use a semaphore to implement a monitor. 
A semaphore essentially is just a counter. When the counter is positive, if a thread tries to acquire the semaphore then it is allowed, and 
the counter is decremented. When a thread is done then it releases the semaphore, and increments the counter.

============================
Diff Monitor and Mutext:

Conceptually they are the same. But usually they are implemented slightly differently

Monitor: High level construct, Provides locking mechnisim at object level, Hence member function and members can be protectd by thread of same process. 
        Since it use space lock less overhead compare to Mutex which is provide by linux kernel. 
        Mutex form kernel will magae lock even b/w thread of different process.
 

Usually, the implementation of monitors is faster/light-weight, since it is designed for multi-threaded synchronization within the same process. 
Also, usually, it is provided by a framework/library itself (as opposed to requesting the OS).

Mutex

Usually, mutexes are provided by the OS kernel and libraries/frameworks simply provide an interface to invoke it. 
This makes them heavy-weight/slower, but they work across threads on different processes. OS might also provide features to access the mutex by name for 
easy sharing between instances of separate executables (as opposed to using a handle that can be used by fork only).

