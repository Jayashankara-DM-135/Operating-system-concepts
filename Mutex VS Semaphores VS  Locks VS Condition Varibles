Semaphores: Slove the Producer-Consumer probelm or Bounded buffer problem.

[SEMAPHORE: DEFINITION]

A semaphore is as an object with an integer value that we can manipulate with
two routines (which we will call sem_wait() and sem_post() to follow the POSIX
standard). Because the initial value of the semaphore determines its behavior,
before calling any other routine to interact with the semaphore, we must first
initialize it to some value, as this code below does:

--------------------------------------------------------------------------------
#include <semaphore.h>
sem_t s;
sem_init(&s, 0, 1);
--------------------------------------------------------------------------------
                    [FIGURE: INITIALIZING A SEMAPHORE]

In the figure, we declare a semaphore s and initialize it to the value of 1
(you can ignore the second argument to sem_init() for now; read the man page
for details). 

After a semaphore is initialized, we can call one of two functions to interact
with it, sem_wait() or sem_post() [4]. The behavior of these two functions is
described here:

--------------------------------------------------------------------------------
int sem_wait(sem_t *s) {
    wait until value of semaphore s is greater than 0
    decrement the value of semaphore s by 1
}

int sem_post(sem_t *s) {
    increment the value of semaphore s by 1
    if there are 1 or more threads waiting, wake 1
}
--------------------------------------------------------------------------------
                    [FIGURE: INITIALIZING A SEMAPHORE]

For now, we are not concerned with the implementation of these routines, which
clearly requires some care; with multiple threads calling into sem_wait() and
sem_post(), there is the obvious need for managing these critical sections
with locks and queues similar to how we previously built locks. We will now
focus on how to *use* these primitives; later we may discuss how they are
built. 

A couple of notes. First, we can see that sem_wait() will either return right
away (because the value of the semaphore was 1 or higher when we called
sem_wait()), or it will cause the caller to suspend execution waiting for a
subsequent post. Of course, multiple calling threads may call into sem_wait(),
and thus all be queued waiting to be woken. Once woken, the waiting thread
will then decrement the value of the semaphore and return to the user.

Second, we can see that sem_post() does not ever suspend the caller. Rather,
it simply increments the value of the semaphore and then, if there is a thread
waiting to be woken, wakes 1 of them up. 

You should not worry here about the seeming race conditions possible within
the semaphore; assume that the modifications they make to the state of the
semaphore are all performed atomically.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


Semaphore as a LOCK / Binary Semaphores : 


[BINARY SEMAPHORES, A.K.A. LOCKS] Note: Initail value of semaphores is one.

We are now ready to use a semaphore. Our first use will be one with which we
are already familiar: using a semaphore as a lock. Here is a code snippet:

--------------------------------------------------------------------------------
sem_t m;
sem_init(&m, 0, X); // initialize semaphore to X; what should X be?

sem_wait(&m);
// critical section here
sem_post(&m);
--------------------------------------------------------------------------------
                    [FIGURE: A SEMAPHORE AS A LOCK]

To build a lock, we simply surround the critical section of interest with a
sem_wait()/sem_post() pair. Critical to making this work, though, is the
initial value of the semaphore. What should it be?

If we look back at the definition of the sem_wait() and sem_post() routines
above, we can see that the initial value of the semaphore should be 1. Imagine
the first thread (thread 0) calling sem_wait(); it will first wait for the
value of the semaphore to be greater than 0, which it is (the semaphore's
value is 1). It will thus not wait at all and decrement the value to 0 before
returning to the caller. That thread is now free to enter the critical
section. If no other thread tries to acquire the lock while thread 0 is inside
the critical section, when it calls sem_post(), it will simply restore the
value of the semaphore to 1 (and not wake any waiting thread, because there
are no waiting threads).

The more interesting case arises when thread 0 holds the lock (i.e., it has
called sem_wait() but not yet called sem_post()), and another thread (thread
1, say) tries to enter the critical section by calling sem_wait(). In this
case, thread 1 will find that the value of the semaphore is 0, and thus wait
(putting itself to sleep and relinquishing the processor). When thread 0 runs
again, it will eventually call sem_post(), incrementing the value of the
semaphore back to 1, and then wake the waiting thread 0, which will then be
able to acquire the lock for itself.

In this basic way, we are able to use semaphores as locks. Because the value
of the semaphore simply alternates between 1 and 0, this usage is sometimes
known as a *binary semaphore*. 


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

[SEMAPHORES AS CONDITION VARIABLES] Note: Initail value of semaphores is zero.

Semaphores are also useful when a thread wants to halt its own progress
waiting for something to change. For example, a thread may wish to wait for
a list to become non-empty, so that it can take an element off of the list. 
In this pattern of usage, we often find a thread *waiting* for something to
happen, and a different thread making that something happen and 
then *signaling* that it has indeed happened, thus waking the waiting
thread. Because the waiting thread (or threads, really) is waiting for some
*condition* in the program to change, we are using the semaphore as a
*condition variable*. We will see condition variables again later,
particularly when covering monitors. 

A simple example is as follows. Imagine a thread creates another thread and
then wants to wait for it to complete its execution:

--------------------------------------------------------------------------------
void *
child(void *arg) {
    printf("child\n");
    // signal here: child is done
    return NULL;
}

int
main(int argc, char *argv[]) {
    printf("parent: begin\n");
    pthread_t c;
    Pthread_create(c, NULL, child, NULL);
    // wait here for child
    printf("parent: end\n");
    return 0;
}
--------------------------------------------------------------------------------
                 [FIGURE: PARENT WAITING FOR CHILD]

What we would like to see here is the following output:

--------------------------------------------------------------------------------
parent: begin
child
parent: end
--------------------------------------------------------------------------------
           [FIGURE: OUTPUT FROM PARENT WAITING FOR CHILD]

The question, then, is how to use a semaphore to achieve this effect, and is
it turns out, it is quite simple, as we see here:

--------------------------------------------------------------------------------
sem_t s;

void *
child(void *arg) {
    printf("child\n");
    // signal here: child is done
    sem_post(&s);
    return NULL;
}

int
main(int argc, char *argv[]) {
    sem_init(&s, 0, X); // what should X be?
    printf("parent: begin\n");
    pthread_t c;
    Pthread_create(c, NULL, child, NULL);
    // wait here for child
    sem_wait(&s);
    printf("parent: end\n");
    return 0;
}
--------------------------------------------------------------------------------
             [FIGURE: PARENT WAITING FOR CHILD WITH A SEMAPHORE]

As you can see in the code, the parent simply calls sem_wait() and the child
sem_post() to wait for the condition of the child finishing its execution to
become true. However, this raises the question: what should the initial value
of this semaphore be? (think about it here, instead of reading ahead)

The answer, of course, is that the value of the semaphore should be set to is
the number 0. There are two cases to consider. First, let us assume that the
parent creates the child but the child has not run yet (i.e., it is sitting in
a ready queue but not running). In this case, the parent will call sem_wait()
before the child has called sem_post(), and thus we'd like the parent to wait
for the child to run. The only way this will happen is if the value of the
semaphore is not greater than 0; hence, 0 as the initial value makes
sense. When the child finally runs, it will call sem_post(), incrementing the
value to 1 and waking the parent, which will then return from sem_wait() and
complete the program. 

The second case occurs when the child runs to completion before the parent
gets a chance to call sem_wait(). In this case, the child will first call
sem_post(), thus incrementing the value of the semaphore from 0 to 1. When the
parent then gets a chance to run, it will call sem_wait() and find the value
of the semaphore to be 1; the parent will thus decrement the value and return
from sem_wait() without waiting, also achieving the desired effect.

